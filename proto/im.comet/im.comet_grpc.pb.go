// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: im.comet/im.comet.proto

package im_comet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	ws "github.com/garfieldlw/NimbusIM/proto/ws"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImComet_PushMsgToSingle_FullMethodName = "/com.NimbusIM.proto.im.comet.ImComet/PushMsgToSingle"
	ImComet_PushMsgToGroup_FullMethodName  = "/com.NimbusIM.proto.im.comet.ImComet/PushMsgToGroup"
	ImComet_SendMsg_FullMethodName         = "/com.NimbusIM.proto.im.comet.ImComet/SendMsg"
)

// ImCometClient is the client API for ImComet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImCometClient interface {
	// push msg to client, 给客户端推送消息
	PushMsgToSingle(ctx context.Context, in *ws.MsgRequest, opts ...grpc.CallOption) (*ws.MsgResponse, error)
	// push msg to client, 给客户端推送群聊消息
	PushMsgToGroup(ctx context.Context, in *ws.MsgRequest, opts ...grpc.CallOption) (*ws.MsgResponse, error)
	// seng msg to user, 发消息给用户
	SendMsg(ctx context.Context, in *ws.MsgRequest, opts ...grpc.CallOption) (*ws.MsgResponse, error)
}

type imCometClient struct {
	cc grpc.ClientConnInterface
}

func NewImCometClient(cc grpc.ClientConnInterface) ImCometClient {
	return &imCometClient{cc}
}

func (c *imCometClient) PushMsgToSingle(ctx context.Context, in *ws.MsgRequest, opts ...grpc.CallOption) (*ws.MsgResponse, error) {
	out := new(ws.MsgResponse)
	err := c.cc.Invoke(ctx, ImComet_PushMsgToSingle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imCometClient) PushMsgToGroup(ctx context.Context, in *ws.MsgRequest, opts ...grpc.CallOption) (*ws.MsgResponse, error) {
	out := new(ws.MsgResponse)
	err := c.cc.Invoke(ctx, ImComet_PushMsgToGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imCometClient) SendMsg(ctx context.Context, in *ws.MsgRequest, opts ...grpc.CallOption) (*ws.MsgResponse, error) {
	out := new(ws.MsgResponse)
	err := c.cc.Invoke(ctx, ImComet_SendMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImCometServer is the server API for ImComet service.
// All implementations should embed UnimplementedImCometServer
// for forward compatibility
type ImCometServer interface {
	// push msg to client, 给客户端推送消息
	PushMsgToSingle(context.Context, *ws.MsgRequest) (*ws.MsgResponse, error)
	// push msg to client, 给客户端推送群聊消息
	PushMsgToGroup(context.Context, *ws.MsgRequest) (*ws.MsgResponse, error)
	// seng msg to user, 发消息给用户
	SendMsg(context.Context, *ws.MsgRequest) (*ws.MsgResponse, error)
}

// UnimplementedImCometServer should be embedded to have forward compatible implementations.
type UnimplementedImCometServer struct {
}

func (UnimplementedImCometServer) PushMsgToSingle(context.Context, *ws.MsgRequest) (*ws.MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushMsgToSingle not implemented")
}
func (UnimplementedImCometServer) PushMsgToGroup(context.Context, *ws.MsgRequest) (*ws.MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushMsgToGroup not implemented")
}
func (UnimplementedImCometServer) SendMsg(context.Context, *ws.MsgRequest) (*ws.MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}

// UnsafeImCometServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImCometServer will
// result in compilation errors.
type UnsafeImCometServer interface {
	mustEmbedUnimplementedImCometServer()
}

func RegisterImCometServer(s grpc.ServiceRegistrar, srv ImCometServer) {
	s.RegisterService(&ImComet_ServiceDesc, srv)
}

func _ImComet_PushMsgToSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ws.MsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImCometServer).PushMsgToSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImComet_PushMsgToSingle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImCometServer).PushMsgToSingle(ctx, req.(*ws.MsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImComet_PushMsgToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ws.MsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImCometServer).PushMsgToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImComet_PushMsgToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImCometServer).PushMsgToGroup(ctx, req.(*ws.MsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImComet_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ws.MsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImCometServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImComet_SendMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImCometServer).SendMsg(ctx, req.(*ws.MsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImComet_ServiceDesc is the grpc.ServiceDesc for ImComet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImComet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.NimbusIM.proto.im.comet.ImComet",
	HandlerType: (*ImCometServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushMsgToSingle",
			Handler:    _ImComet_PushMsgToSingle_Handler,
		},
		{
			MethodName: "PushMsgToGroup",
			Handler:    _ImComet_PushMsgToGroup_Handler,
		},
		{
			MethodName: "SendMsg",
			Handler:    _ImComet_SendMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "im.comet/im.comet.proto",
}
