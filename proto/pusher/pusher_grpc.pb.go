// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: pusher/pusher.proto

package pusher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KafkaPusher_PushToKafka_FullMethodName      = "/com.NimbusIM.proto.pusher.KafkaPusher/PushToKafka"
	KafkaPusher_PushToKafkaDelay_FullMethodName = "/com.NimbusIM.proto.pusher.KafkaPusher/PushToKafkaDelay"
)

// KafkaPusherClient is the client API for KafkaPusher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KafkaPusherClient interface {
	PushToKafka(ctx context.Context, in *PusherKafkaRequest, opts ...grpc.CallOption) (*PusherKafkaResponse, error)
	PushToKafkaDelay(ctx context.Context, in *PusherKafkaDelayRequest, opts ...grpc.CallOption) (*PusherKafkaDelayResponse, error)
}

type kafkaPusherClient struct {
	cc grpc.ClientConnInterface
}

func NewKafkaPusherClient(cc grpc.ClientConnInterface) KafkaPusherClient {
	return &kafkaPusherClient{cc}
}

func (c *kafkaPusherClient) PushToKafka(ctx context.Context, in *PusherKafkaRequest, opts ...grpc.CallOption) (*PusherKafkaResponse, error) {
	out := new(PusherKafkaResponse)
	err := c.cc.Invoke(ctx, KafkaPusher_PushToKafka_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaPusherClient) PushToKafkaDelay(ctx context.Context, in *PusherKafkaDelayRequest, opts ...grpc.CallOption) (*PusherKafkaDelayResponse, error) {
	out := new(PusherKafkaDelayResponse)
	err := c.cc.Invoke(ctx, KafkaPusher_PushToKafkaDelay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KafkaPusherServer is the server API for KafkaPusher service.
// All implementations should embed UnimplementedKafkaPusherServer
// for forward compatibility
type KafkaPusherServer interface {
	PushToKafka(context.Context, *PusherKafkaRequest) (*PusherKafkaResponse, error)
	PushToKafkaDelay(context.Context, *PusherKafkaDelayRequest) (*PusherKafkaDelayResponse, error)
}

// UnimplementedKafkaPusherServer should be embedded to have forward compatible implementations.
type UnimplementedKafkaPusherServer struct {
}

func (UnimplementedKafkaPusherServer) PushToKafka(context.Context, *PusherKafkaRequest) (*PusherKafkaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushToKafka not implemented")
}
func (UnimplementedKafkaPusherServer) PushToKafkaDelay(context.Context, *PusherKafkaDelayRequest) (*PusherKafkaDelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushToKafkaDelay not implemented")
}

// UnsafeKafkaPusherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KafkaPusherServer will
// result in compilation errors.
type UnsafeKafkaPusherServer interface {
	mustEmbedUnimplementedKafkaPusherServer()
}

func RegisterKafkaPusherServer(s grpc.ServiceRegistrar, srv KafkaPusherServer) {
	s.RegisterService(&KafkaPusher_ServiceDesc, srv)
}

func _KafkaPusher_PushToKafka_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PusherKafkaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaPusherServer).PushToKafka(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaPusher_PushToKafka_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaPusherServer).PushToKafka(ctx, req.(*PusherKafkaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaPusher_PushToKafkaDelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PusherKafkaDelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaPusherServer).PushToKafkaDelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaPusher_PushToKafkaDelay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaPusherServer).PushToKafkaDelay(ctx, req.(*PusherKafkaDelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KafkaPusher_ServiceDesc is the grpc.ServiceDesc for KafkaPusher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KafkaPusher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.NimbusIM.proto.pusher.KafkaPusher",
	HandlerType: (*KafkaPusherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushToKafka",
			Handler:    _KafkaPusher_PushToKafka_Handler,
		},
		{
			MethodName: "PushToKafkaDelay",
			Handler:    _KafkaPusher_PushToKafkaDelay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pusher/pusher.proto",
}
