// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: message/message.proto

package message

import (
	common "github.com/garfieldlw/NimbusIM/proto/common"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	ws "github.com/garfieldlw/NimbusIM/proto/ws"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Message_Insert_FullMethodName              = "/com.NimbusIM.proto.message.Message/Insert"
	Message_UpdateContentStatus_FullMethodName = "/com.NimbusIM.proto.message.Message/UpdateContentStatus"
	Message_UpdateStatus_FullMethodName        = "/com.NimbusIM.proto.message.Message/UpdateStatus"
	Message_UpdatePrivacy_FullMethodName       = "/com.NimbusIM.proto.message.Message/UpdatePrivacy"
	Message_ReadAll_FullMethodName             = "/com.NimbusIM.proto.message.Message/ReadAll"
	Message_UnreadStart_FullMethodName         = "/com.NimbusIM.proto.message.Message/UnreadStart"
	Message_UnreadCount_FullMethodName         = "/com.NimbusIM.proto.message.Message/UnreadCount"
	Message_ReadAllAt_FullMethodName           = "/com.NimbusIM.proto.message.Message/ReadAllAt"
	Message_UnreadStartAt_FullMethodName       = "/com.NimbusIM.proto.message.Message/UnreadStartAt"
	Message_UnreadEndAt_FullMethodName         = "/com.NimbusIM.proto.message.Message/UnreadEndAt"
	Message_UnreadCountAt_FullMethodName       = "/com.NimbusIM.proto.message.Message/UnreadCountAt"
	Message_ReadAllSystem_FullMethodName       = "/com.NimbusIM.proto.message.Message/ReadAllSystem"
	Message_UnreadStartSystem_FullMethodName   = "/com.NimbusIM.proto.message.Message/UnreadStartSystem"
	Message_UnreadCountSystem_FullMethodName   = "/com.NimbusIM.proto.message.Message/UnreadCountSystem"
	Message_DetailById_FullMethodName          = "/com.NimbusIM.proto.message.Message/DetailById"
	Message_DetailByIds_FullMethodName         = "/com.NimbusIM.proto.message.Message/DetailByIds"
	Message_List_FullMethodName                = "/com.NimbusIM.proto.message.Message/List"
)

// MessageClient is the client API for Message service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageClient interface {
	Insert(ctx context.Context, in *MessageInsertRequest, opts ...grpc.CallOption) (*ws.MsgData, error)
	UpdateContentStatus(ctx context.Context, in *MessageUpdateContentStatusRequest, opts ...grpc.CallOption) (*common.Empty, error)
	UpdateStatus(ctx context.Context, in *MessageUpdateStatusRequest, opts ...grpc.CallOption) (*common.Empty, error)
	UpdatePrivacy(ctx context.Context, in *MessageUpdatePrivacyRequest, opts ...grpc.CallOption) (*common.Empty, error)
	ReadAll(ctx context.Context, in *MessageReadAllRequest, opts ...grpc.CallOption) (*common.Empty, error)
	UnreadStart(ctx context.Context, in *MessageUnreadStartRequest, opts ...grpc.CallOption) (*MessageUnreadStartResponse, error)
	UnreadCount(ctx context.Context, in *MessageUnreadCountRequest, opts ...grpc.CallOption) (*MessageUnreadCountResponse, error)
	ReadAllAt(ctx context.Context, in *MessageReadAllRequest, opts ...grpc.CallOption) (*common.Empty, error)
	UnreadStartAt(ctx context.Context, in *MessageUnreadStartRequest, opts ...grpc.CallOption) (*MessageUnreadStartResponse, error)
	UnreadEndAt(ctx context.Context, in *MessageUnreadEndRequest, opts ...grpc.CallOption) (*MessageUnreadEndResponse, error)
	UnreadCountAt(ctx context.Context, in *MessageUnreadCountRequest, opts ...grpc.CallOption) (*MessageUnreadCountResponse, error)
	ReadAllSystem(ctx context.Context, in *MessageReadAllSystemRequest, opts ...grpc.CallOption) (*common.Empty, error)
	UnreadStartSystem(ctx context.Context, in *MessageUnreadStartSystemRequest, opts ...grpc.CallOption) (*MessageUnreadStartResponse, error)
	UnreadCountSystem(ctx context.Context, in *MessageUnreadCountSystemRequest, opts ...grpc.CallOption) (*MessageUnreadCountResponse, error)
	DetailById(ctx context.Context, in *common.DetailByIdRequest, opts ...grpc.CallOption) (*ws.MsgData, error)
	DetailByIds(ctx context.Context, in *common.DetailByIdsRequest, opts ...grpc.CallOption) (*MessageListResponse, error)
	List(ctx context.Context, in *MessageListRequest, opts ...grpc.CallOption) (*MessageListResponse, error)
}

type messageClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageClient(cc grpc.ClientConnInterface) MessageClient {
	return &messageClient{cc}
}

func (c *messageClient) Insert(ctx context.Context, in *MessageInsertRequest, opts ...grpc.CallOption) (*ws.MsgData, error) {
	out := new(ws.MsgData)
	err := c.cc.Invoke(ctx, Message_Insert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) UpdateContentStatus(ctx context.Context, in *MessageUpdateContentStatusRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, Message_UpdateContentStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) UpdateStatus(ctx context.Context, in *MessageUpdateStatusRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, Message_UpdateStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) UpdatePrivacy(ctx context.Context, in *MessageUpdatePrivacyRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, Message_UpdatePrivacy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) ReadAll(ctx context.Context, in *MessageReadAllRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, Message_ReadAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) UnreadStart(ctx context.Context, in *MessageUnreadStartRequest, opts ...grpc.CallOption) (*MessageUnreadStartResponse, error) {
	out := new(MessageUnreadStartResponse)
	err := c.cc.Invoke(ctx, Message_UnreadStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) UnreadCount(ctx context.Context, in *MessageUnreadCountRequest, opts ...grpc.CallOption) (*MessageUnreadCountResponse, error) {
	out := new(MessageUnreadCountResponse)
	err := c.cc.Invoke(ctx, Message_UnreadCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) ReadAllAt(ctx context.Context, in *MessageReadAllRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, Message_ReadAllAt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) UnreadStartAt(ctx context.Context, in *MessageUnreadStartRequest, opts ...grpc.CallOption) (*MessageUnreadStartResponse, error) {
	out := new(MessageUnreadStartResponse)
	err := c.cc.Invoke(ctx, Message_UnreadStartAt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) UnreadEndAt(ctx context.Context, in *MessageUnreadEndRequest, opts ...grpc.CallOption) (*MessageUnreadEndResponse, error) {
	out := new(MessageUnreadEndResponse)
	err := c.cc.Invoke(ctx, Message_UnreadEndAt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) UnreadCountAt(ctx context.Context, in *MessageUnreadCountRequest, opts ...grpc.CallOption) (*MessageUnreadCountResponse, error) {
	out := new(MessageUnreadCountResponse)
	err := c.cc.Invoke(ctx, Message_UnreadCountAt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) ReadAllSystem(ctx context.Context, in *MessageReadAllSystemRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, Message_ReadAllSystem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) UnreadStartSystem(ctx context.Context, in *MessageUnreadStartSystemRequest, opts ...grpc.CallOption) (*MessageUnreadStartResponse, error) {
	out := new(MessageUnreadStartResponse)
	err := c.cc.Invoke(ctx, Message_UnreadStartSystem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) UnreadCountSystem(ctx context.Context, in *MessageUnreadCountSystemRequest, opts ...grpc.CallOption) (*MessageUnreadCountResponse, error) {
	out := new(MessageUnreadCountResponse)
	err := c.cc.Invoke(ctx, Message_UnreadCountSystem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) DetailById(ctx context.Context, in *common.DetailByIdRequest, opts ...grpc.CallOption) (*ws.MsgData, error) {
	out := new(ws.MsgData)
	err := c.cc.Invoke(ctx, Message_DetailById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) DetailByIds(ctx context.Context, in *common.DetailByIdsRequest, opts ...grpc.CallOption) (*MessageListResponse, error) {
	out := new(MessageListResponse)
	err := c.cc.Invoke(ctx, Message_DetailByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) List(ctx context.Context, in *MessageListRequest, opts ...grpc.CallOption) (*MessageListResponse, error) {
	out := new(MessageListResponse)
	err := c.cc.Invoke(ctx, Message_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServer is the server API for Message service.
// All implementations should embed UnimplementedMessageServer
// for forward compatibility
type MessageServer interface {
	Insert(context.Context, *MessageInsertRequest) (*ws.MsgData, error)
	UpdateContentStatus(context.Context, *MessageUpdateContentStatusRequest) (*common.Empty, error)
	UpdateStatus(context.Context, *MessageUpdateStatusRequest) (*common.Empty, error)
	UpdatePrivacy(context.Context, *MessageUpdatePrivacyRequest) (*common.Empty, error)
	ReadAll(context.Context, *MessageReadAllRequest) (*common.Empty, error)
	UnreadStart(context.Context, *MessageUnreadStartRequest) (*MessageUnreadStartResponse, error)
	UnreadCount(context.Context, *MessageUnreadCountRequest) (*MessageUnreadCountResponse, error)
	ReadAllAt(context.Context, *MessageReadAllRequest) (*common.Empty, error)
	UnreadStartAt(context.Context, *MessageUnreadStartRequest) (*MessageUnreadStartResponse, error)
	UnreadEndAt(context.Context, *MessageUnreadEndRequest) (*MessageUnreadEndResponse, error)
	UnreadCountAt(context.Context, *MessageUnreadCountRequest) (*MessageUnreadCountResponse, error)
	ReadAllSystem(context.Context, *MessageReadAllSystemRequest) (*common.Empty, error)
	UnreadStartSystem(context.Context, *MessageUnreadStartSystemRequest) (*MessageUnreadStartResponse, error)
	UnreadCountSystem(context.Context, *MessageUnreadCountSystemRequest) (*MessageUnreadCountResponse, error)
	DetailById(context.Context, *common.DetailByIdRequest) (*ws.MsgData, error)
	DetailByIds(context.Context, *common.DetailByIdsRequest) (*MessageListResponse, error)
	List(context.Context, *MessageListRequest) (*MessageListResponse, error)
}

// UnimplementedMessageServer should be embedded to have forward compatible implementations.
type UnimplementedMessageServer struct {
}

func (UnimplementedMessageServer) Insert(context.Context, *MessageInsertRequest) (*ws.MsgData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedMessageServer) UpdateContentStatus(context.Context, *MessageUpdateContentStatusRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContentStatus not implemented")
}
func (UnimplementedMessageServer) UpdateStatus(context.Context, *MessageUpdateStatusRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedMessageServer) UpdatePrivacy(context.Context, *MessageUpdatePrivacyRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrivacy not implemented")
}
func (UnimplementedMessageServer) ReadAll(context.Context, *MessageReadAllRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAll not implemented")
}
func (UnimplementedMessageServer) UnreadStart(context.Context, *MessageUnreadStartRequest) (*MessageUnreadStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnreadStart not implemented")
}
func (UnimplementedMessageServer) UnreadCount(context.Context, *MessageUnreadCountRequest) (*MessageUnreadCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnreadCount not implemented")
}
func (UnimplementedMessageServer) ReadAllAt(context.Context, *MessageReadAllRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllAt not implemented")
}
func (UnimplementedMessageServer) UnreadStartAt(context.Context, *MessageUnreadStartRequest) (*MessageUnreadStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnreadStartAt not implemented")
}
func (UnimplementedMessageServer) UnreadEndAt(context.Context, *MessageUnreadEndRequest) (*MessageUnreadEndResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnreadEndAt not implemented")
}
func (UnimplementedMessageServer) UnreadCountAt(context.Context, *MessageUnreadCountRequest) (*MessageUnreadCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnreadCountAt not implemented")
}
func (UnimplementedMessageServer) ReadAllSystem(context.Context, *MessageReadAllSystemRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllSystem not implemented")
}
func (UnimplementedMessageServer) UnreadStartSystem(context.Context, *MessageUnreadStartSystemRequest) (*MessageUnreadStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnreadStartSystem not implemented")
}
func (UnimplementedMessageServer) UnreadCountSystem(context.Context, *MessageUnreadCountSystemRequest) (*MessageUnreadCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnreadCountSystem not implemented")
}
func (UnimplementedMessageServer) DetailById(context.Context, *common.DetailByIdRequest) (*ws.MsgData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailById not implemented")
}
func (UnimplementedMessageServer) DetailByIds(context.Context, *common.DetailByIdsRequest) (*MessageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailByIds not implemented")
}
func (UnimplementedMessageServer) List(context.Context, *MessageListRequest) (*MessageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServer will
// result in compilation errors.
type UnsafeMessageServer interface {
	mustEmbedUnimplementedMessageServer()
}

func RegisterMessageServer(s grpc.ServiceRegistrar, srv MessageServer) {
	s.RegisterService(&Message_ServiceDesc, srv)
}

func _Message_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_Insert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).Insert(ctx, req.(*MessageInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_UpdateContentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageUpdateContentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).UpdateContentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_UpdateContentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).UpdateContentStatus(ctx, req.(*MessageUpdateContentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageUpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).UpdateStatus(ctx, req.(*MessageUpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_UpdatePrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageUpdatePrivacyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).UpdatePrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_UpdatePrivacy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).UpdatePrivacy(ctx, req.(*MessageUpdatePrivacyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_ReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageReadAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).ReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_ReadAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).ReadAll(ctx, req.(*MessageReadAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_UnreadStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageUnreadStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).UnreadStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_UnreadStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).UnreadStart(ctx, req.(*MessageUnreadStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_UnreadCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageUnreadCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).UnreadCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_UnreadCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).UnreadCount(ctx, req.(*MessageUnreadCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_ReadAllAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageReadAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).ReadAllAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_ReadAllAt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).ReadAllAt(ctx, req.(*MessageReadAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_UnreadStartAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageUnreadStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).UnreadStartAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_UnreadStartAt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).UnreadStartAt(ctx, req.(*MessageUnreadStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_UnreadEndAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageUnreadEndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).UnreadEndAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_UnreadEndAt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).UnreadEndAt(ctx, req.(*MessageUnreadEndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_UnreadCountAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageUnreadCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).UnreadCountAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_UnreadCountAt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).UnreadCountAt(ctx, req.(*MessageUnreadCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_ReadAllSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageReadAllSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).ReadAllSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_ReadAllSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).ReadAllSystem(ctx, req.(*MessageReadAllSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_UnreadStartSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageUnreadStartSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).UnreadStartSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_UnreadStartSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).UnreadStartSystem(ctx, req.(*MessageUnreadStartSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_UnreadCountSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageUnreadCountSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).UnreadCountSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_UnreadCountSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).UnreadCountSystem(ctx, req.(*MessageUnreadCountSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_DetailById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.DetailByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).DetailById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_DetailById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).DetailById(ctx, req.(*common.DetailByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_DetailByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.DetailByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).DetailByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_DetailByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).DetailByIds(ctx, req.(*common.DetailByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).List(ctx, req.(*MessageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Message_ServiceDesc is the grpc.ServiceDesc for Message service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Message_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.NimbusIM.proto.message.Message",
	HandlerType: (*MessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _Message_Insert_Handler,
		},
		{
			MethodName: "UpdateContentStatus",
			Handler:    _Message_UpdateContentStatus_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _Message_UpdateStatus_Handler,
		},
		{
			MethodName: "UpdatePrivacy",
			Handler:    _Message_UpdatePrivacy_Handler,
		},
		{
			MethodName: "ReadAll",
			Handler:    _Message_ReadAll_Handler,
		},
		{
			MethodName: "UnreadStart",
			Handler:    _Message_UnreadStart_Handler,
		},
		{
			MethodName: "UnreadCount",
			Handler:    _Message_UnreadCount_Handler,
		},
		{
			MethodName: "ReadAllAt",
			Handler:    _Message_ReadAllAt_Handler,
		},
		{
			MethodName: "UnreadStartAt",
			Handler:    _Message_UnreadStartAt_Handler,
		},
		{
			MethodName: "UnreadEndAt",
			Handler:    _Message_UnreadEndAt_Handler,
		},
		{
			MethodName: "UnreadCountAt",
			Handler:    _Message_UnreadCountAt_Handler,
		},
		{
			MethodName: "ReadAllSystem",
			Handler:    _Message_ReadAllSystem_Handler,
		},
		{
			MethodName: "UnreadStartSystem",
			Handler:    _Message_UnreadStartSystem_Handler,
		},
		{
			MethodName: "UnreadCountSystem",
			Handler:    _Message_UnreadCountSystem_Handler,
		},
		{
			MethodName: "DetailById",
			Handler:    _Message_DetailById_Handler,
		},
		{
			MethodName: "DetailByIds",
			Handler:    _Message_DetailByIds_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Message_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message/message.proto",
}
