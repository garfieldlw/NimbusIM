// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: message/message.proto

package message

import (
	common "github.com/garfieldlw/NimbusIM/proto/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	ws "github.com/garfieldlw/NimbusIM/proto/ws"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageInsertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ConversationId int64                   `protobuf:"varint,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	SendId         int64                   `protobuf:"varint,3,opt,name=send_id,json=sendId,proto3" json:"send_id,omitempty"`
	ReceiveId      int64                   `protobuf:"varint,4,opt,name=receive_id,json=receiveId,proto3" json:"receive_id,omitempty"`
	FromType       ws.MsgFromTypeEnum      `protobuf:"varint,5,opt,name=from_type,json=fromType,proto3,enum=com.NimbusIM.proto.ws.MsgFromTypeEnum" json:"from_type,omitempty"`
	SessionType    ws.MsgSessionTypeEnum   `protobuf:"varint,6,opt,name=session_type,json=sessionType,proto3,enum=com.NimbusIM.proto.ws.MsgSessionTypeEnum" json:"session_type,omitempty"`
	ContentType    ws.MsgContentTypeEnum   `protobuf:"varint,7,opt,name=content_type,json=contentType,proto3,enum=com.NimbusIM.proto.ws.MsgContentTypeEnum" json:"content_type,omitempty"`
	Content        *ws.MsgContent          `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`
	ContentStatus  ws.MsgContentStatusEnum `protobuf:"varint,9,opt,name=content_status,json=contentStatus,proto3,enum=com.NimbusIM.proto.ws.MsgContentStatusEnum" json:"content_status,omitempty"`
	SendTime       int64                   `protobuf:"varint,10,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
	Privacy        int32                   `protobuf:"varint,11,opt,name=privacy,proto3" json:"privacy,omitempty"`
	Status         int32                   `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`
	Quote          int64                   `protobuf:"varint,13,opt,name=quote,proto3" json:"quote,omitempty"`
}

func (x *MessageInsertRequest) Reset() {
	*x = MessageInsertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageInsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageInsertRequest) ProtoMessage() {}

func (x *MessageInsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageInsertRequest.ProtoReflect.Descriptor instead.
func (*MessageInsertRequest) Descriptor() ([]byte, []int) {
	return file_message_message_proto_rawDescGZIP(), []int{0}
}

func (x *MessageInsertRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageInsertRequest) GetConversationId() int64 {
	if x != nil {
		return x.ConversationId
	}
	return 0
}

func (x *MessageInsertRequest) GetSendId() int64 {
	if x != nil {
		return x.SendId
	}
	return 0
}

func (x *MessageInsertRequest) GetReceiveId() int64 {
	if x != nil {
		return x.ReceiveId
	}
	return 0
}

func (x *MessageInsertRequest) GetFromType() ws.MsgFromTypeEnum {
	if x != nil {
		return x.FromType
	}
	return ws.MsgFromTypeEnum(0)
}

func (x *MessageInsertRequest) GetSessionType() ws.MsgSessionTypeEnum {
	if x != nil {
		return x.SessionType
	}
	return ws.MsgSessionTypeEnum(0)
}

func (x *MessageInsertRequest) GetContentType() ws.MsgContentTypeEnum {
	if x != nil {
		return x.ContentType
	}
	return ws.MsgContentTypeEnum(0)
}

func (x *MessageInsertRequest) GetContent() *ws.MsgContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *MessageInsertRequest) GetContentStatus() ws.MsgContentStatusEnum {
	if x != nil {
		return x.ContentStatus
	}
	return ws.MsgContentStatusEnum(0)
}

func (x *MessageInsertRequest) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *MessageInsertRequest) GetPrivacy() int32 {
	if x != nil {
		return x.Privacy
	}
	return 0
}

func (x *MessageInsertRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MessageInsertRequest) GetQuote() int64 {
	if x != nil {
		return x.Quote
	}
	return 0
}

type MessageUpdateContentStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ContentStatus ws.MsgContentStatusEnum `protobuf:"varint,2,opt,name=content_status,json=contentStatus,proto3,enum=com.NimbusIM.proto.ws.MsgContentStatusEnum" json:"content_status,omitempty"`
}

func (x *MessageUpdateContentStatusRequest) Reset() {
	*x = MessageUpdateContentStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUpdateContentStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUpdateContentStatusRequest) ProtoMessage() {}

func (x *MessageUpdateContentStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUpdateContentStatusRequest.ProtoReflect.Descriptor instead.
func (*MessageUpdateContentStatusRequest) Descriptor() ([]byte, []int) {
	return file_message_message_proto_rawDescGZIP(), []int{1}
}

func (x *MessageUpdateContentStatusRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageUpdateContentStatusRequest) GetContentStatus() ws.MsgContentStatusEnum {
	if x != nil {
		return x.ContentStatus
	}
	return ws.MsgContentStatusEnum(0)
}

type MessageUpdateStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *MessageUpdateStatusRequest) Reset() {
	*x = MessageUpdateStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUpdateStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUpdateStatusRequest) ProtoMessage() {}

func (x *MessageUpdateStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUpdateStatusRequest.ProtoReflect.Descriptor instead.
func (*MessageUpdateStatusRequest) Descriptor() ([]byte, []int) {
	return file_message_message_proto_rawDescGZIP(), []int{2}
}

func (x *MessageUpdateStatusRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageUpdateStatusRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type MessageUpdatePrivacyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Privacy int32 `protobuf:"varint,2,opt,name=privacy,proto3" json:"privacy,omitempty"`
}

func (x *MessageUpdatePrivacyRequest) Reset() {
	*x = MessageUpdatePrivacyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUpdatePrivacyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUpdatePrivacyRequest) ProtoMessage() {}

func (x *MessageUpdatePrivacyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUpdatePrivacyRequest.ProtoReflect.Descriptor instead.
func (*MessageUpdatePrivacyRequest) Descriptor() ([]byte, []int) {
	return file_message_message_proto_rawDescGZIP(), []int{3}
}

func (x *MessageUpdatePrivacyRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageUpdatePrivacyRequest) GetPrivacy() int32 {
	if x != nil {
		return x.Privacy
	}
	return 0
}

type MessageReadAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ConversationId int64 `protobuf:"varint,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
}

func (x *MessageReadAllRequest) Reset() {
	*x = MessageReadAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReadAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReadAllRequest) ProtoMessage() {}

func (x *MessageReadAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReadAllRequest.ProtoReflect.Descriptor instead.
func (*MessageReadAllRequest) Descriptor() ([]byte, []int) {
	return file_message_message_proto_rawDescGZIP(), []int{4}
}

func (x *MessageReadAllRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MessageReadAllRequest) GetConversationId() int64 {
	if x != nil {
		return x.ConversationId
	}
	return 0
}

type MessageUnreadStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ConversationId int64 `protobuf:"varint,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
}

func (x *MessageUnreadStartRequest) Reset() {
	*x = MessageUnreadStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUnreadStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUnreadStartRequest) ProtoMessage() {}

func (x *MessageUnreadStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUnreadStartRequest.ProtoReflect.Descriptor instead.
func (*MessageUnreadStartRequest) Descriptor() ([]byte, []int) {
	return file_message_message_proto_rawDescGZIP(), []int{5}
}

func (x *MessageUnreadStartRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MessageUnreadStartRequest) GetConversationId() int64 {
	if x != nil {
		return x.ConversationId
	}
	return 0
}

type MessageUnreadEndRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ConversationId int64 `protobuf:"varint,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
}

func (x *MessageUnreadEndRequest) Reset() {
	*x = MessageUnreadEndRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUnreadEndRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUnreadEndRequest) ProtoMessage() {}

func (x *MessageUnreadEndRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUnreadEndRequest.ProtoReflect.Descriptor instead.
func (*MessageUnreadEndRequest) Descriptor() ([]byte, []int) {
	return file_message_message_proto_rawDescGZIP(), []int{6}
}

func (x *MessageUnreadEndRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MessageUnreadEndRequest) GetConversationId() int64 {
	if x != nil {
		return x.ConversationId
	}
	return 0
}

type MessageUnreadCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ConversationId int64 `protobuf:"varint,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
}

func (x *MessageUnreadCountRequest) Reset() {
	*x = MessageUnreadCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUnreadCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUnreadCountRequest) ProtoMessage() {}

func (x *MessageUnreadCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUnreadCountRequest.ProtoReflect.Descriptor instead.
func (*MessageUnreadCountRequest) Descriptor() ([]byte, []int) {
	return file_message_message_proto_rawDescGZIP(), []int{7}
}

func (x *MessageUnreadCountRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MessageUnreadCountRequest) GetConversationId() int64 {
	if x != nil {
		return x.ConversationId
	}
	return 0
}

type MessageReadAllSystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ConversationId int64                 `protobuf:"varint,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ContentType    ws.MsgContentTypeEnum `protobuf:"varint,3,opt,name=content_type,json=contentType,proto3,enum=com.NimbusIM.proto.ws.MsgContentTypeEnum" json:"content_type,omitempty"`
}

func (x *MessageReadAllSystemRequest) Reset() {
	*x = MessageReadAllSystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReadAllSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReadAllSystemRequest) ProtoMessage() {}

func (x *MessageReadAllSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReadAllSystemRequest.ProtoReflect.Descriptor instead.
func (*MessageReadAllSystemRequest) Descriptor() ([]byte, []int) {
	return file_message_message_proto_rawDescGZIP(), []int{8}
}

func (x *MessageReadAllSystemRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MessageReadAllSystemRequest) GetConversationId() int64 {
	if x != nil {
		return x.ConversationId
	}
	return 0
}

func (x *MessageReadAllSystemRequest) GetContentType() ws.MsgContentTypeEnum {
	if x != nil {
		return x.ContentType
	}
	return ws.MsgContentTypeEnum(0)
}

type MessageUnreadStartSystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ConversationId int64                 `protobuf:"varint,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ContentType    ws.MsgContentTypeEnum `protobuf:"varint,3,opt,name=content_type,json=contentType,proto3,enum=com.NimbusIM.proto.ws.MsgContentTypeEnum" json:"content_type,omitempty"`
}

func (x *MessageUnreadStartSystemRequest) Reset() {
	*x = MessageUnreadStartSystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUnreadStartSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUnreadStartSystemRequest) ProtoMessage() {}

func (x *MessageUnreadStartSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUnreadStartSystemRequest.ProtoReflect.Descriptor instead.
func (*MessageUnreadStartSystemRequest) Descriptor() ([]byte, []int) {
	return file_message_message_proto_rawDescGZIP(), []int{9}
}

func (x *MessageUnreadStartSystemRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MessageUnreadStartSystemRequest) GetConversationId() int64 {
	if x != nil {
		return x.ConversationId
	}
	return 0
}

func (x *MessageUnreadStartSystemRequest) GetContentType() ws.MsgContentTypeEnum {
	if x != nil {
		return x.ContentType
	}
	return ws.MsgContentTypeEnum(0)
}

type MessageUnreadCountSystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ConversationId int64                 `protobuf:"varint,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ContentType    ws.MsgContentTypeEnum `protobuf:"varint,3,opt,name=content_type,json=contentType,proto3,enum=com.NimbusIM.proto.ws.MsgContentTypeEnum" json:"content_type,omitempty"`
}

func (x *MessageUnreadCountSystemRequest) Reset() {
	*x = MessageUnreadCountSystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUnreadCountSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUnreadCountSystemRequest) ProtoMessage() {}

func (x *MessageUnreadCountSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUnreadCountSystemRequest.ProtoReflect.Descriptor instead.
func (*MessageUnreadCountSystemRequest) Descriptor() ([]byte, []int) {
	return file_message_message_proto_rawDescGZIP(), []int{10}
}

func (x *MessageUnreadCountSystemRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MessageUnreadCountSystemRequest) GetConversationId() int64 {
	if x != nil {
		return x.ConversationId
	}
	return 0
}

func (x *MessageUnreadCountSystemRequest) GetContentType() ws.MsgContentTypeEnum {
	if x != nil {
		return x.ContentType
	}
	return ws.MsgContentTypeEnum(0)
}

type MessageListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset         int64                   `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit          int64                   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Order          string                  `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	StartId        int64                   `protobuf:"varint,4,opt,name=start_id,json=startId,proto3" json:"start_id,omitempty"`
	EndId          int64                   `protobuf:"varint,5,opt,name=end_id,json=endId,proto3" json:"end_id,omitempty"`
	SendId         int64                   `protobuf:"varint,6,opt,name=send_id,json=sendId,proto3" json:"send_id,omitempty"`
	ReceiveId      int64                   `protobuf:"varint,7,opt,name=receive_id,json=receiveId,proto3" json:"receive_id,omitempty"`
	FromType       ws.MsgFromTypeEnum      `protobuf:"varint,8,opt,name=from_type,json=fromType,proto3,enum=com.NimbusIM.proto.ws.MsgFromTypeEnum" json:"from_type,omitempty"`
	SessionType    ws.MsgSessionTypeEnum   `protobuf:"varint,9,opt,name=session_type,json=sessionType,proto3,enum=com.NimbusIM.proto.ws.MsgSessionTypeEnum" json:"session_type,omitempty"`
	ContentType    ws.MsgContentTypeEnum   `protobuf:"varint,10,opt,name=content_type,json=contentType,proto3,enum=com.NimbusIM.proto.ws.MsgContentTypeEnum" json:"content_type,omitempty"`
	ContentStatus  ws.MsgContentStatusEnum `protobuf:"varint,11,opt,name=content_status,json=contentStatus,proto3,enum=com.NimbusIM.proto.ws.MsgContentStatusEnum" json:"content_status,omitempty"`
	StartSendTime  int64                   `protobuf:"varint,12,opt,name=start_send_time,json=startSendTime,proto3" json:"start_send_time,omitempty"`
	EndSendTime    int64                   `protobuf:"varint,13,opt,name=end_send_time,json=endSendTime,proto3" json:"end_send_time,omitempty"`
	Status         int32                   `protobuf:"varint,14,opt,name=status,proto3" json:"status,omitempty"`
	StartTime      int64                   `protobuf:"varint,15,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime        int64                   `protobuf:"varint,16,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Quote          int64                   `protobuf:"varint,17,opt,name=quote,proto3" json:"quote,omitempty"`
	ConversationId int64                   `protobuf:"varint,18,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ContentTypes   []ws.MsgContentTypeEnum `protobuf:"varint,19,rep,packed,name=content_types,json=contentTypes,proto3,enum=com.NimbusIM.proto.ws.MsgContentTypeEnum" json:"content_types,omitempty"`
	Privacy        int32                   `protobuf:"varint,20,opt,name=privacy,proto3" json:"privacy,omitempty"`
	Version        int32                   `protobuf:"varint,21,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *MessageListRequest) Reset() {
	*x = MessageListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageListRequest) ProtoMessage() {}

func (x *MessageListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageListRequest.ProtoReflect.Descriptor instead.
func (*MessageListRequest) Descriptor() ([]byte, []int) {
	return file_message_message_proto_rawDescGZIP(), []int{11}
}

func (x *MessageListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MessageListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *MessageListRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *MessageListRequest) GetStartId() int64 {
	if x != nil {
		return x.StartId
	}
	return 0
}

func (x *MessageListRequest) GetEndId() int64 {
	if x != nil {
		return x.EndId
	}
	return 0
}

func (x *MessageListRequest) GetSendId() int64 {
	if x != nil {
		return x.SendId
	}
	return 0
}

func (x *MessageListRequest) GetReceiveId() int64 {
	if x != nil {
		return x.ReceiveId
	}
	return 0
}

func (x *MessageListRequest) GetFromType() ws.MsgFromTypeEnum {
	if x != nil {
		return x.FromType
	}
	return ws.MsgFromTypeEnum(0)
}

func (x *MessageListRequest) GetSessionType() ws.MsgSessionTypeEnum {
	if x != nil {
		return x.SessionType
	}
	return ws.MsgSessionTypeEnum(0)
}

func (x *MessageListRequest) GetContentType() ws.MsgContentTypeEnum {
	if x != nil {
		return x.ContentType
	}
	return ws.MsgContentTypeEnum(0)
}

func (x *MessageListRequest) GetContentStatus() ws.MsgContentStatusEnum {
	if x != nil {
		return x.ContentStatus
	}
	return ws.MsgContentStatusEnum(0)
}

func (x *MessageListRequest) GetStartSendTime() int64 {
	if x != nil {
		return x.StartSendTime
	}
	return 0
}

func (x *MessageListRequest) GetEndSendTime() int64 {
	if x != nil {
		return x.EndSendTime
	}
	return 0
}

func (x *MessageListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MessageListRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *MessageListRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *MessageListRequest) GetQuote() int64 {
	if x != nil {
		return x.Quote
	}
	return 0
}

func (x *MessageListRequest) GetConversationId() int64 {
	if x != nil {
		return x.ConversationId
	}
	return 0
}

func (x *MessageListRequest) GetContentTypes() []ws.MsgContentTypeEnum {
	if x != nil {
		return x.ContentTypes
	}
	return nil
}

func (x *MessageListRequest) GetPrivacy() int32 {
	if x != nil {
		return x.Privacy
	}
	return 0
}

func (x *MessageListRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type MessageUnreadStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MessageUnreadStartResponse) Reset() {
	*x = MessageUnreadStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUnreadStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUnreadStartResponse) ProtoMessage() {}

func (x *MessageUnreadStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUnreadStartResponse.ProtoReflect.Descriptor instead.
func (*MessageUnreadStartResponse) Descriptor() ([]byte, []int) {
	return file_message_message_proto_rawDescGZIP(), []int{12}
}

func (x *MessageUnreadStartResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type MessageUnreadEndResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MessageUnreadEndResponse) Reset() {
	*x = MessageUnreadEndResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_message_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUnreadEndResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUnreadEndResponse) ProtoMessage() {}

func (x *MessageUnreadEndResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_message_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUnreadEndResponse.ProtoReflect.Descriptor instead.
func (*MessageUnreadEndResponse) Descriptor() ([]byte, []int) {
	return file_message_message_proto_rawDescGZIP(), []int{13}
}

func (x *MessageUnreadEndResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type MessageUnreadCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *MessageUnreadCountResponse) Reset() {
	*x = MessageUnreadCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_message_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUnreadCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUnreadCountResponse) ProtoMessage() {}

func (x *MessageUnreadCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_message_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUnreadCountResponse.ProtoReflect.Descriptor instead.
func (*MessageUnreadCountResponse) Descriptor() ([]byte, []int) {
	return file_message_message_proto_rawDescGZIP(), []int{14}
}

func (x *MessageUnreadCountResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type MessageListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total  int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Offset int64         `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64         `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Items  []*ws.MsgData `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *MessageListResponse) Reset() {
	*x = MessageListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_message_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageListResponse) ProtoMessage() {}

func (x *MessageListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_message_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageListResponse.ProtoReflect.Descriptor instead.
func (*MessageListResponse) Descriptor() ([]byte, []int) {
	return file_message_message_proto_rawDescGZIP(), []int{15}
}

func (x *MessageListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MessageListResponse) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MessageListResponse) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *MessageListResponse) GetItems() []*ws.MsgData {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_message_message_proto protoreflect.FileDescriptor

var file_message_message_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d,
	0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x77, 0x73, 0x2f, 0x77, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x04, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12,
	0x43, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49,
	0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x77, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e,
	0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x73,
	0x2e, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62,
	0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x73, 0x2e, 0x4d, 0x73,
	0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x21, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75,
	0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x73, 0x2e, 0x4d, 0x73, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x44, 0x0a, 0x1a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x47, 0x0a, 0x1b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x22,
	0x59, 0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x19, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x17, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x19, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xad, 0x01, 0x0a, 0x1b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x41, 0x6c, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x77, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x1f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x1f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x4c, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62,
	0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x73, 0x2e, 0x4d, 0x73,
	0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd8, 0x06,
	0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x49, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62,
	0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x73, 0x2e, 0x4d, 0x73,
	0x67, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x66,
	0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x77, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x77, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x77, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x77, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x1a, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x32, 0x0a, 0x1a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x32, 0xc5, 0x0f, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x5c, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x30,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x00, 0x12, 0x78, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e,
	0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75,
	0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49,
	0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x07, 0x52, 0x65, 0x61, 0x64, 0x41, 0x6c,
	0x6c, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75,
	0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x0b, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69,
	0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x0b, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69,
	0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64,
	0x41, 0x6c, 0x6c, 0x41, 0x74, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62,
	0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e,
	0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a,
	0x0d, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x35,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62,
	0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7a, 0x0a, 0x0b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x33,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73,
	0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x45, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x0d,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75,
	0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c,
	0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x41, 0x6c, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x41, 0x6c, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e,
	0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a,
	0x11, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49,
	0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x11, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0a, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75,
	0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49,
	0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x0b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79,
	0x49, 0x64, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73,
	0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49,
	0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x4e, 0x69, 0x6d, 0x62, 0x75, 0x73, 0x49, 0x4d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x0a, 0x5a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_message_proto_rawDescOnce sync.Once
	file_message_message_proto_rawDescData = file_message_message_proto_rawDesc
)

func file_message_message_proto_rawDescGZIP() []byte {
	file_message_message_proto_rawDescOnce.Do(func() {
		file_message_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_message_proto_rawDescData)
	})
	return file_message_message_proto_rawDescData
}

var file_message_message_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_message_message_proto_goTypes = []interface{}{
	(*MessageInsertRequest)(nil),              // 0: com.NimbusIM.proto.message.MessageInsertRequest
	(*MessageUpdateContentStatusRequest)(nil), // 1: com.NimbusIM.proto.message.MessageUpdateContentStatusRequest
	(*MessageUpdateStatusRequest)(nil),        // 2: com.NimbusIM.proto.message.MessageUpdateStatusRequest
	(*MessageUpdatePrivacyRequest)(nil),       // 3: com.NimbusIM.proto.message.MessageUpdatePrivacyRequest
	(*MessageReadAllRequest)(nil),             // 4: com.NimbusIM.proto.message.MessageReadAllRequest
	(*MessageUnreadStartRequest)(nil),         // 5: com.NimbusIM.proto.message.MessageUnreadStartRequest
	(*MessageUnreadEndRequest)(nil),           // 6: com.NimbusIM.proto.message.MessageUnreadEndRequest
	(*MessageUnreadCountRequest)(nil),         // 7: com.NimbusIM.proto.message.MessageUnreadCountRequest
	(*MessageReadAllSystemRequest)(nil),       // 8: com.NimbusIM.proto.message.MessageReadAllSystemRequest
	(*MessageUnreadStartSystemRequest)(nil),   // 9: com.NimbusIM.proto.message.MessageUnreadStartSystemRequest
	(*MessageUnreadCountSystemRequest)(nil),   // 10: com.NimbusIM.proto.message.MessageUnreadCountSystemRequest
	(*MessageListRequest)(nil),                // 11: com.NimbusIM.proto.message.MessageListRequest
	(*MessageUnreadStartResponse)(nil),        // 12: com.NimbusIM.proto.message.MessageUnreadStartResponse
	(*MessageUnreadEndResponse)(nil),          // 13: com.NimbusIM.proto.message.MessageUnreadEndResponse
	(*MessageUnreadCountResponse)(nil),        // 14: com.NimbusIM.proto.message.MessageUnreadCountResponse
	(*MessageListResponse)(nil),               // 15: com.NimbusIM.proto.message.MessageListResponse
	(ws.MsgFromTypeEnum)(0),                   // 16: com.NimbusIM.proto.ws.MsgFromTypeEnum
	(ws.MsgSessionTypeEnum)(0),                // 17: com.NimbusIM.proto.ws.MsgSessionTypeEnum
	(ws.MsgContentTypeEnum)(0),                // 18: com.NimbusIM.proto.ws.MsgContentTypeEnum
	(*ws.MsgContent)(nil),                     // 19: com.NimbusIM.proto.ws.MsgContent
	(ws.MsgContentStatusEnum)(0),              // 20: com.NimbusIM.proto.ws.MsgContentStatusEnum
	(*ws.MsgData)(nil),                        // 21: com.NimbusIM.proto.ws.MsgData
	(*common.DetailByIdRequest)(nil),          // 22: com.NimbusIM.proto.common.DetailByIdRequest
	(*common.DetailByIdsRequest)(nil),         // 23: com.NimbusIM.proto.common.DetailByIdsRequest
	(*common.Empty)(nil),                      // 24: com.NimbusIM.proto.common.Empty
}
var file_message_message_proto_depIdxs = []int32{
	16, // 0: com.NimbusIM.proto.message.MessageInsertRequest.from_type:type_name -> com.NimbusIM.proto.ws.MsgFromTypeEnum
	17, // 1: com.NimbusIM.proto.message.MessageInsertRequest.session_type:type_name -> com.NimbusIM.proto.ws.MsgSessionTypeEnum
	18, // 2: com.NimbusIM.proto.message.MessageInsertRequest.content_type:type_name -> com.NimbusIM.proto.ws.MsgContentTypeEnum
	19, // 3: com.NimbusIM.proto.message.MessageInsertRequest.content:type_name -> com.NimbusIM.proto.ws.MsgContent
	20, // 4: com.NimbusIM.proto.message.MessageInsertRequest.content_status:type_name -> com.NimbusIM.proto.ws.MsgContentStatusEnum
	20, // 5: com.NimbusIM.proto.message.MessageUpdateContentStatusRequest.content_status:type_name -> com.NimbusIM.proto.ws.MsgContentStatusEnum
	18, // 6: com.NimbusIM.proto.message.MessageReadAllSystemRequest.content_type:type_name -> com.NimbusIM.proto.ws.MsgContentTypeEnum
	18, // 7: com.NimbusIM.proto.message.MessageUnreadStartSystemRequest.content_type:type_name -> com.NimbusIM.proto.ws.MsgContentTypeEnum
	18, // 8: com.NimbusIM.proto.message.MessageUnreadCountSystemRequest.content_type:type_name -> com.NimbusIM.proto.ws.MsgContentTypeEnum
	16, // 9: com.NimbusIM.proto.message.MessageListRequest.from_type:type_name -> com.NimbusIM.proto.ws.MsgFromTypeEnum
	17, // 10: com.NimbusIM.proto.message.MessageListRequest.session_type:type_name -> com.NimbusIM.proto.ws.MsgSessionTypeEnum
	18, // 11: com.NimbusIM.proto.message.MessageListRequest.content_type:type_name -> com.NimbusIM.proto.ws.MsgContentTypeEnum
	20, // 12: com.NimbusIM.proto.message.MessageListRequest.content_status:type_name -> com.NimbusIM.proto.ws.MsgContentStatusEnum
	18, // 13: com.NimbusIM.proto.message.MessageListRequest.content_types:type_name -> com.NimbusIM.proto.ws.MsgContentTypeEnum
	21, // 14: com.NimbusIM.proto.message.MessageListResponse.items:type_name -> com.NimbusIM.proto.ws.MsgData
	0,  // 15: com.NimbusIM.proto.message.Message.Insert:input_type -> com.NimbusIM.proto.message.MessageInsertRequest
	1,  // 16: com.NimbusIM.proto.message.Message.UpdateContentStatus:input_type -> com.NimbusIM.proto.message.MessageUpdateContentStatusRequest
	2,  // 17: com.NimbusIM.proto.message.Message.UpdateStatus:input_type -> com.NimbusIM.proto.message.MessageUpdateStatusRequest
	3,  // 18: com.NimbusIM.proto.message.Message.UpdatePrivacy:input_type -> com.NimbusIM.proto.message.MessageUpdatePrivacyRequest
	4,  // 19: com.NimbusIM.proto.message.Message.ReadAll:input_type -> com.NimbusIM.proto.message.MessageReadAllRequest
	5,  // 20: com.NimbusIM.proto.message.Message.UnreadStart:input_type -> com.NimbusIM.proto.message.MessageUnreadStartRequest
	7,  // 21: com.NimbusIM.proto.message.Message.UnreadCount:input_type -> com.NimbusIM.proto.message.MessageUnreadCountRequest
	4,  // 22: com.NimbusIM.proto.message.Message.ReadAllAt:input_type -> com.NimbusIM.proto.message.MessageReadAllRequest
	5,  // 23: com.NimbusIM.proto.message.Message.UnreadStartAt:input_type -> com.NimbusIM.proto.message.MessageUnreadStartRequest
	6,  // 24: com.NimbusIM.proto.message.Message.UnreadEndAt:input_type -> com.NimbusIM.proto.message.MessageUnreadEndRequest
	7,  // 25: com.NimbusIM.proto.message.Message.UnreadCountAt:input_type -> com.NimbusIM.proto.message.MessageUnreadCountRequest
	8,  // 26: com.NimbusIM.proto.message.Message.ReadAllSystem:input_type -> com.NimbusIM.proto.message.MessageReadAllSystemRequest
	9,  // 27: com.NimbusIM.proto.message.Message.UnreadStartSystem:input_type -> com.NimbusIM.proto.message.MessageUnreadStartSystemRequest
	10, // 28: com.NimbusIM.proto.message.Message.UnreadCountSystem:input_type -> com.NimbusIM.proto.message.MessageUnreadCountSystemRequest
	22, // 29: com.NimbusIM.proto.message.Message.DetailById:input_type -> com.NimbusIM.proto.common.DetailByIdRequest
	23, // 30: com.NimbusIM.proto.message.Message.DetailByIds:input_type -> com.NimbusIM.proto.common.DetailByIdsRequest
	11, // 31: com.NimbusIM.proto.message.Message.List:input_type -> com.NimbusIM.proto.message.MessageListRequest
	21, // 32: com.NimbusIM.proto.message.Message.Insert:output_type -> com.NimbusIM.proto.ws.MsgData
	24, // 33: com.NimbusIM.proto.message.Message.UpdateContentStatus:output_type -> com.NimbusIM.proto.common.Empty
	24, // 34: com.NimbusIM.proto.message.Message.UpdateStatus:output_type -> com.NimbusIM.proto.common.Empty
	24, // 35: com.NimbusIM.proto.message.Message.UpdatePrivacy:output_type -> com.NimbusIM.proto.common.Empty
	24, // 36: com.NimbusIM.proto.message.Message.ReadAll:output_type -> com.NimbusIM.proto.common.Empty
	12, // 37: com.NimbusIM.proto.message.Message.UnreadStart:output_type -> com.NimbusIM.proto.message.MessageUnreadStartResponse
	14, // 38: com.NimbusIM.proto.message.Message.UnreadCount:output_type -> com.NimbusIM.proto.message.MessageUnreadCountResponse
	24, // 39: com.NimbusIM.proto.message.Message.ReadAllAt:output_type -> com.NimbusIM.proto.common.Empty
	12, // 40: com.NimbusIM.proto.message.Message.UnreadStartAt:output_type -> com.NimbusIM.proto.message.MessageUnreadStartResponse
	13, // 41: com.NimbusIM.proto.message.Message.UnreadEndAt:output_type -> com.NimbusIM.proto.message.MessageUnreadEndResponse
	14, // 42: com.NimbusIM.proto.message.Message.UnreadCountAt:output_type -> com.NimbusIM.proto.message.MessageUnreadCountResponse
	24, // 43: com.NimbusIM.proto.message.Message.ReadAllSystem:output_type -> com.NimbusIM.proto.common.Empty
	12, // 44: com.NimbusIM.proto.message.Message.UnreadStartSystem:output_type -> com.NimbusIM.proto.message.MessageUnreadStartResponse
	14, // 45: com.NimbusIM.proto.message.Message.UnreadCountSystem:output_type -> com.NimbusIM.proto.message.MessageUnreadCountResponse
	21, // 46: com.NimbusIM.proto.message.Message.DetailById:output_type -> com.NimbusIM.proto.ws.MsgData
	15, // 47: com.NimbusIM.proto.message.Message.DetailByIds:output_type -> com.NimbusIM.proto.message.MessageListResponse
	15, // 48: com.NimbusIM.proto.message.Message.List:output_type -> com.NimbusIM.proto.message.MessageListResponse
	32, // [32:49] is the sub-list for method output_type
	15, // [15:32] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_message_message_proto_init() }
func file_message_message_proto_init() {
	if File_message_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageInsertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUpdateContentStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUpdateStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUpdatePrivacyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReadAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUnreadStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUnreadEndRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUnreadCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReadAllSystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUnreadStartSystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUnreadCountSystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_message_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUnreadStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_message_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUnreadEndResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_message_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUnreadCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_message_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_message_message_proto_goTypes,
		DependencyIndexes: file_message_message_proto_depIdxs,
		MessageInfos:      file_message_message_proto_msgTypes,
	}.Build()
	File_message_message_proto = out.File
	file_message_message_proto_rawDesc = nil
	file_message_message_proto_goTypes = nil
	file_message_message_proto_depIdxs = nil
}
