// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: conversation/conversation.proto

package conversation

import (
	common "github.com/garfieldlw/NimbusIM/proto/common"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Conversation_UpsetSingle_FullMethodName                   = "/com.NimbusIM.proto.conversation.Conversation/UpsetSingle"
	Conversation_UpsetGroup_FullMethodName                    = "/com.NimbusIM.proto.conversation.Conversation/UpsetGroup"
	Conversation_UpdateStatus_FullMethodName                  = "/com.NimbusIM.proto.conversation.Conversation/UpdateStatus"
	Conversation_Detail_FullMethodName                        = "/com.NimbusIM.proto.conversation.Conversation/Detail"
	Conversation_DetailGroup_FullMethodName                   = "/com.NimbusIM.proto.conversation.Conversation/DetailGroup"
	Conversation_ListAllUserIdByConversationId_FullMethodName = "/com.NimbusIM.proto.conversation.Conversation/ListAllUserIdByConversationId"
	Conversation_ListAllId_FullMethodName                     = "/com.NimbusIM.proto.conversation.Conversation/ListAllId"
)

// ConversationClient is the client API for Conversation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConversationClient interface {
	UpsetSingle(ctx context.Context, in *ConversationUpsetSingleRequest, opts ...grpc.CallOption) (*ConversationEntity, error)
	UpsetGroup(ctx context.Context, in *ConversationUpsetGroupRequest, opts ...grpc.CallOption) (*ConversationEntity, error)
	UpdateStatus(ctx context.Context, in *ConversationUpdateStatusRequest, opts ...grpc.CallOption) (*common.Empty, error)
	Detail(ctx context.Context, in *ConversationDetailRequest, opts ...grpc.CallOption) (*ConversationEntity, error)
	DetailGroup(ctx context.Context, in *common.DetailByIdRequest, opts ...grpc.CallOption) (*ConversationGroupEntity, error)
	ListAllUserIdByConversationId(ctx context.Context, in *ConversationListAllUserIdByConversationIdRequest, opts ...grpc.CallOption) (*ConversationListUserIdResponse, error)
	ListAllId(ctx context.Context, in *ConversationListAllRequest, opts ...grpc.CallOption) (*ConversationListIdResponse, error)
}

type conversationClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationClient(cc grpc.ClientConnInterface) ConversationClient {
	return &conversationClient{cc}
}

func (c *conversationClient) UpsetSingle(ctx context.Context, in *ConversationUpsetSingleRequest, opts ...grpc.CallOption) (*ConversationEntity, error) {
	out := new(ConversationEntity)
	err := c.cc.Invoke(ctx, Conversation_UpsetSingle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) UpsetGroup(ctx context.Context, in *ConversationUpsetGroupRequest, opts ...grpc.CallOption) (*ConversationEntity, error) {
	out := new(ConversationEntity)
	err := c.cc.Invoke(ctx, Conversation_UpsetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) UpdateStatus(ctx context.Context, in *ConversationUpdateStatusRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, Conversation_UpdateStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) Detail(ctx context.Context, in *ConversationDetailRequest, opts ...grpc.CallOption) (*ConversationEntity, error) {
	out := new(ConversationEntity)
	err := c.cc.Invoke(ctx, Conversation_Detail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) DetailGroup(ctx context.Context, in *common.DetailByIdRequest, opts ...grpc.CallOption) (*ConversationGroupEntity, error) {
	out := new(ConversationGroupEntity)
	err := c.cc.Invoke(ctx, Conversation_DetailGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) ListAllUserIdByConversationId(ctx context.Context, in *ConversationListAllUserIdByConversationIdRequest, opts ...grpc.CallOption) (*ConversationListUserIdResponse, error) {
	out := new(ConversationListUserIdResponse)
	err := c.cc.Invoke(ctx, Conversation_ListAllUserIdByConversationId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) ListAllId(ctx context.Context, in *ConversationListAllRequest, opts ...grpc.CallOption) (*ConversationListIdResponse, error) {
	out := new(ConversationListIdResponse)
	err := c.cc.Invoke(ctx, Conversation_ListAllId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationServer is the server API for Conversation service.
// All implementations should embed UnimplementedConversationServer
// for forward compatibility
type ConversationServer interface {
	UpsetSingle(context.Context, *ConversationUpsetSingleRequest) (*ConversationEntity, error)
	UpsetGroup(context.Context, *ConversationUpsetGroupRequest) (*ConversationEntity, error)
	UpdateStatus(context.Context, *ConversationUpdateStatusRequest) (*common.Empty, error)
	Detail(context.Context, *ConversationDetailRequest) (*ConversationEntity, error)
	DetailGroup(context.Context, *common.DetailByIdRequest) (*ConversationGroupEntity, error)
	ListAllUserIdByConversationId(context.Context, *ConversationListAllUserIdByConversationIdRequest) (*ConversationListUserIdResponse, error)
	ListAllId(context.Context, *ConversationListAllRequest) (*ConversationListIdResponse, error)
}

// UnimplementedConversationServer should be embedded to have forward compatible implementations.
type UnimplementedConversationServer struct {
}

func (UnimplementedConversationServer) UpsetSingle(context.Context, *ConversationUpsetSingleRequest) (*ConversationEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsetSingle not implemented")
}
func (UnimplementedConversationServer) UpsetGroup(context.Context, *ConversationUpsetGroupRequest) (*ConversationEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsetGroup not implemented")
}
func (UnimplementedConversationServer) UpdateStatus(context.Context, *ConversationUpdateStatusRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedConversationServer) Detail(context.Context, *ConversationDetailRequest) (*ConversationEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detail not implemented")
}
func (UnimplementedConversationServer) DetailGroup(context.Context, *common.DetailByIdRequest) (*ConversationGroupEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailGroup not implemented")
}
func (UnimplementedConversationServer) ListAllUserIdByConversationId(context.Context, *ConversationListAllUserIdByConversationIdRequest) (*ConversationListUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllUserIdByConversationId not implemented")
}
func (UnimplementedConversationServer) ListAllId(context.Context, *ConversationListAllRequest) (*ConversationListIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllId not implemented")
}

// UnsafeConversationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConversationServer will
// result in compilation errors.
type UnsafeConversationServer interface {
	mustEmbedUnimplementedConversationServer()
}

func RegisterConversationServer(s grpc.ServiceRegistrar, srv ConversationServer) {
	s.RegisterService(&Conversation_ServiceDesc, srv)
}

func _Conversation_UpsetSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationUpsetSingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).UpsetSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_UpsetSingle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).UpsetSingle(ctx, req.(*ConversationUpsetSingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_UpsetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationUpsetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).UpsetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_UpsetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).UpsetGroup(ctx, req.(*ConversationUpsetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationUpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).UpdateStatus(ctx, req.(*ConversationUpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_Detail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).Detail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_Detail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).Detail(ctx, req.(*ConversationDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_DetailGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.DetailByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).DetailGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_DetailGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).DetailGroup(ctx, req.(*common.DetailByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_ListAllUserIdByConversationId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationListAllUserIdByConversationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).ListAllUserIdByConversationId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_ListAllUserIdByConversationId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).ListAllUserIdByConversationId(ctx, req.(*ConversationListAllUserIdByConversationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_ListAllId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationListAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).ListAllId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_ListAllId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).ListAllId(ctx, req.(*ConversationListAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Conversation_ServiceDesc is the grpc.ServiceDesc for Conversation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Conversation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.NimbusIM.proto.conversation.Conversation",
	HandlerType: (*ConversationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsetSingle",
			Handler:    _Conversation_UpsetSingle_Handler,
		},
		{
			MethodName: "UpsetGroup",
			Handler:    _Conversation_UpsetGroup_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _Conversation_UpdateStatus_Handler,
		},
		{
			MethodName: "Detail",
			Handler:    _Conversation_Detail_Handler,
		},
		{
			MethodName: "DetailGroup",
			Handler:    _Conversation_DetailGroup_Handler,
		},
		{
			MethodName: "ListAllUserIdByConversationId",
			Handler:    _Conversation_ListAllUserIdByConversationId_Handler,
		},
		{
			MethodName: "ListAllId",
			Handler:    _Conversation_ListAllId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conversation/conversation.proto",
}
